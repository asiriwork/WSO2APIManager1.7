<%
log = new Log(),
apiStore = jagg.module("manager").getAPIStoreObj(),
user = jagg.getUser();


function getFirstAccessTime(providerName, server) {
    var usage = [];
    var usageout = [];
    try {
        usage = apiStore.getFirstAccessTime(providerName, server);
        if (log.isDebugEnabled()) {
            log.debug("getProviderAPIFirstAccessTime for : " + server);
        }
        if (usage == null) {
            return {
                error:true
            };

        } else {

            return {
                error:false,
                usage:usage
            };
        }
    } catch (e) {
        log.error(e.message);
        return {
            error:e,
            usage:null

        };
    }
}


function getProviderAPIUsage(providerName,from,to, server) {
    var usage = [];
    var usageout = [];
    try {
        usage = apiStore.getProviderAPIUsage(providerName,from,to, server);
        if (log.isDebugEnabled()) {
            log.debug("getProviderAPIUsage for : " + server);
        }
        if (usage == null) {
            return {
                error:true
            };

        } else {

            return {
                error:false,
                usage:usage
            };
        }
    } catch (e) {
        log.error(e.message);
        return {
            error:e,
            usage:null

        };
    }
}

function getTopAppUsers(subscriberName,from,to, server) {
    var usage = [];
    var usageout = [];
    try {
        usage = apiStore.getTopAppUsers(subscriberName,from,to, server);
        if (log.isDebugEnabled()) {
            log.debug("getTopAppUsers for : " + server);
        }
        if (usage == null) {
            return {
                error:true
            };

        } else {

            return {
                error:false,
                usage:usage
            };
        }
    } catch (e) {
        log.error(e.message);
        return {
            error:e,
            usage:null

        };
    }
}

function getPerAppSubscribers(subscriberName,from,to, server) {
    var usage = [];
    var usageout = [];
    try {
        usage = apiStore.getPerAppSubscribers(subscriberName,from,to, server);
        if (log.isDebugEnabled()) {
            log.debug("getPerAppSubscribers for : " + server);
        }
        if (usage == null) {
            return {
                error:true
            };

        } else {

            return {
                error:false,
                usage:usage
            };
        }
    } catch (e) {
        log.error(e.message);
        return {
            error:e,
            usage:null

        };
    }
}


function getPerAppAPIFaultCount(subscriberName,from,to, server) {
    var usage = [];
    var usageout = [];
    try {
        usage = apiStore.getPerAppAPIFaultCount(subscriberName,from,to, server);
        if (log.isDebugEnabled()) {
            log.debug("getPerAppAPIFaultCount for : " + server);
        }
        if (usage == null) {
            return {
                error:true
            };

        } else {

            return {
                error:false,
                usage:usage
            };
        }
    } catch (e) {
        log.error(e.message);
        return {
            error:e,
            usage:null

        };
    }
}


function getPerAppAPICallType(subscriberName,from,to, server) {
    log.info("getPerAppAPICallType");
    var usage = [];
    var usageout = [];
    try {
        usage = apiStore.getPerAppAPICallType(subscriberName,from,to, server);
        if (log.isDebugEnabled()) {
            log.debug("getPerAppAPICallType for : " + server);
        }
        if (usage == null) {
            log.info("getPerAppAPICallType usage null");
            return {
                error:true
            };

        } else {
            log.info("getPerAppAPICallType usage not null");
            return {
                error:false,
                usage:usage
            };
        }
    } catch (e) {
        log.info("getPerAppAPICallType exception");
        log.error(e.message);
        return {
            error:e,
            usage:null

        };
    }
}

%>